= Authentication Mechanisms
== GenerateOIDCTokens

The Kubernetes authentication mechanism relies on an having an OpenID Connect identity provider being configured to generate the id_token as well as manage the session.  The oidc provider is not involved in the authentication chain.  In fact any authentication mechanism can be used to authenticate the user.

=== Mechanism

The mechanism has no initialization parameters.

[source,xml]
---
<mechanism name="genoidctoken">
  <uri>/auth/oidctoken</uri>
  <className>com.tremolosecurity.proxy.auth.GenerateOIDCTokens</className>
  <init>
  </init>
  <params />
</mechanism>
---
 
=== Chain 

The authentication chain must first determine who the user is (ie by username and password, saml, etc).  An oidc identity provider and trust MUST be configured.

[source,xml]
---
<chain name="formloginFilter" level="1" root="dc=domain,dc=com">
  <!-- First authenticate the user, this can be with any combination of mechanisms -->
  <authMech>
    <name>loginForm</name>
    <required>required</required>
    <params>
      <param name="FORMLOGIN_JSP" value="/auth/forms/defaultForm.jsp"/>
      <param name="uidAttr" value="uid"/>
      <param name="uidIsFilter" value="false"/>
    </params>
  </authMech>
  <authMech>
    <name>genoidctoken</name>
    <required>required</required>
    <params>
      <!-- The name of the identity openid connect identity provider (the name of the application the identity provider is configured on -->
      <param name="idpName" value="oidc" />
      <!-- The clientid of the trust used to generate 
      <param name="trustName" value="kubernetes" />
    </params>
  </authMech>
</chain>
---

= Filters

== RetreiveIdToken

This filter is a web service for retrieving the user's current id_token using their refresh token.  It will not generate a new id_token, only retrieve the current one.  It should be configured on an anonymous access url.

[source,xml]
---
<filter class="com.tremolosecurity.proxy.filters.RetreiveIdToken">
  <!-- The name of the application the OIDC identity provider is configured on -->
  <param name="idpName" value="oidc" />
  <!-- The clientid of the trust associated with this token -->
  <param name="trustName" value="kubernetes" />
</filter>
---

= Responses

== InjectIdToken

This response will inject the current id_token into the Authorization header as expected by OAuth 2.0 bearer tokens.  It will also refresh the token if it has expired.  It can only be used if the GenerateOIDCTokens authentication mechanism was used in the user's authentication chain.  This response is useful for integrating the Kubernetes Dashboard into OpenUnison as this will allow you to SSO into the dashboard.
